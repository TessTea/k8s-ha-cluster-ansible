---
# tasks file for docker-host
- name: OS-family on node
  debug:
   msg: "OS family on {{ansible_nodename}}: {{ansible_os_family}}"

- name: remove old packages RedHat
  when: ansible_os_family == "RedHat"
  yum:
    name: ['docker','docker-client','docker-client-latest','docker-common','docker-latest','docker-latest-logrotate','docker-logrotate',docker-engine]
    state: absent

- name: remove old packages Debian
  when: ansible_os_family == "Debian"
  apt:
    name: ['docker','docker.io','containerd','runc','docker-engine']
    state: absent

- name: create /offline-installers directory
  file:
    path: /offline-installers
    state: directory 

- name: copy offline installers
  copy:
    remote_src: no
    src: ./
    dest: /offline-installers/

- name: copy install script
  copy:
    remote_src: no
    src: ./installit.sh
    dest: /offline-installers/
    mode: '0777'

- name: Execute install script
  command: /offline-installers/installit.sh
  register: res
  failed_when: "res.rc not in [ 0, 1 ]"

#####################
# Configuring part: #
#####################

- name: create /etc/daemon directory
  file:
    path: /etc/docker
    state: directory    
- name: configure daemon.json
  template:
    src:  daemon.json.j2
    dest: /etc/docker/daemon.json

- name: create proxy directory for docker
  when: proxy == "yes"
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory

- name: configure proxy for docker
  when: proxy == "yes"
  template:
    src: "https-proxy.conf.j2"
    dest: "/etc/systemd/system/docker.service.d/https-proxy.conf"

- name: Add the user from hosts-file to docker group
  user:
    name: "{{user}}"
    group: docker

- name: daemon reload
  systemd:
   daemon_reload: yes

- name: start docker
  service: 
    name: docker
    state: restarted
    enabled: yes