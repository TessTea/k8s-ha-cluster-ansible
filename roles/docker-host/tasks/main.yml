---
# tasks file for docker-host
- name: OS-family on node
  debug:
   msg: "OS family on {{ansible_nodename}}: {{ansible_os_family}}"

- name: remove old packages RedHat
  when: ansible_os_family == "RedHat"
  yum:
    name: ['docker','docker-client','docker-client-latest','docker-common','docker-latest','docker-latest-logrotate','docker-logrotate',docker-engine]
    state: absent

- name: remove old packages Debian
  when: ansible_os_family == "Debian"
  apt:
    name: ['docker','docker.io','containerd','runc','docker-engine']
    state: absent

- name: install packages RedHat
  when: ansible_os_family == "RedHat"
  yum:
    name: ['yum-utils','device-mapper-persistent-data','lvm2']
    state: present
    update_cache: yes

- name: install docker RedHat
  when: ansible_os_family == "RedHat"
  yum:
    name: ['docker-ce','docker-ce-cli','containerd.io']
    state: present
    update_cache: yes


#####################
# Configuring part: #
#####################

- name: create /etc/daemon directory
  file:
    path: /etc/docker
    state: directory    
- name: configure daemon.json
  template:
    src:  daemon.json.j2
    dest: /etc/docker/daemon.json

- name: create proxy directory for docker
  when: proxy == "yes"
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory

- name: configure proxy for docker
  when: proxy == "yes"
  template:
    src: "https-proxy.conf.j2"
    dest: "/etc/systemd/system/docker.service.d/https-proxy.conf"

- name: Add the user from hosts-file to docker group
  user:
    name: "{{user}}"
    group: docker

- name: daemon reload
  systemd:
   daemon_reload: yes

- name: start docker
  service: 
    name: docker
    state: restarted
    enabled: yes

###################
# Loading images: #
###################

- name: template loader script
  template:
    src:  image_loader.py.j2
    dest: /var/tmp/image_loader.py
    mode: 740

- name: Run a script to load images
  script: /var/tmp/image_loader.py
  args:
    executable: python3

